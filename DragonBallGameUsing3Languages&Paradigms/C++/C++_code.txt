#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>
#include <limits>  


class Entity {
public:
    Entity(const std::string& name, int level, float health_multiplier, float damage_multiplier)
        : name(name), level(level), health_multiplier(health_multiplier), damage_multiplier(damage_multiplier) {}

    virtual ~Entity() {}

    virtual void attack(Entity& target) {
        target.health -= damage;
        std::cout << name << " attacks " << target.name << " for " << damage << " damage!\n";
    }

    virtual void level_up() {
        level += 1;
        std::cout << name << " leveled up to Level " << level << "!\n";

        damage += level * damage_multiplier;

        int regeneration_amount = level * health / 50; 
        health += regeneration_amount;

        std::cout << name << " regenerated " << regeneration_amount << " health!\n";
    }


    virtual void set_health(int new_health) {
        health = new_health;
    }

    virtual void double_damage() {

    }

    virtual void set_damage(int new_damage) {
        damage = new_damage;
    }

    void heal(int amount) {
        health += amount;
        std::cout << name << " healed for " << amount << " health!\n";
    }

    const std::string& get_name() const {
        return name;
    }

    int get_health() const {
        return health;
    }

    int get_damage() const {
        return damage;
    }

    int get_level() const {
        return level;
    }

protected:
    std::string name;
    int health = 100; 
    int damage = 20;  
    int level = 1;
    float health_multiplier;
    float damage_multiplier;
};

class Hero : public Entity {
public:
    Hero(const std::string& name, int level, float health_multiplier, float damage_multiplier)
        : Entity(name, level, health_multiplier, damage_multiplier) {}

    void level_up() override {
        Entity::level_up();

        if (get_level() == 5) {
            std::cout << get_name() << " has evolved into a Super Saiyan!\n";
            set_health(get_health() * 2);  
            set_damage(get_damage() * 2);  
        }
    }

    void double_damage() override {
    damage *= 2;
    std::cout << get_name() << " doubled their damage!\n";
}
};

class Creature : public Entity {
public:
    Creature(const std::string& name, int level, float health_multiplier, float damage_multiplier)
        : Entity(name, level, health_multiplier, damage_multiplier) {
        base_health = rand() % (level * 10 + 10 - (level * 10 - 10)) + (level * 10 - 10);

        base_damage = rand() % (level * 5 + 5 - (level * 5 - 5)) + (level * 5 - 5);

        health = base_health;
        damage = base_damage;
    }

private:
    int base_health;
    int base_damage;
};

class Bag {
public:
    Bag(int senzu_beans, int dragon_balls) : senzu_beans(senzu_beans), dragon_balls(dragon_balls) {}

    void use_senzu(Entity& entity) {
        if (senzu_beans > 0) {
            int healing_amount = entity.get_health() * (entity.get_health() < 75 ? 1.3 : 0.2);
            entity.heal(healing_amount);
            senzu_beans--;
            std::cout << entity.get_name() << " used a Senzu Bean and gained " << healing_amount << " health! Remaining Senzu Beans: " << senzu_beans << "\n";
        } else {
            std::cout << "The bag is empty. You need to find more Senzu Beans!\n";
        }
    }

    void use_dragon_ball(Entity& entity) {
        if (dragon_balls > 0) {
            entity.double_damage();
            dragon_balls--;
            std::cout << entity.get_name() << " used a Dragon Ball and doubled their damage! Remaining Dragon Balls: " << dragon_balls << "\n";
        } else {
            std::cout << "The bag is empty. You need to find more Dragon Balls!\n";
        }
    }


    void access_contents() const {
        std::cout << "Bag Contents:\n";
        std::cout << "Senzu Beans: " << senzu_beans << "\n";
        std::cout << "Dragon Balls: " << dragon_balls << "\n";
    }

private:
    int senzu_beans;
    int dragon_balls;
};

void game_loop() {
    srand(time(nullptr));

    while (true) {
    std::cout << "Choose your hero:\n";
    std::cout << "1. Goku\n";
    std::cout << "2. Vegeta\n";
    std::cout << "3. Gohan\n";

      int heroChoice;
      std::cout << "Enter the number of your choice: ";
      if (!(std::cin >> heroChoice) || heroChoice < 1 || heroChoice > 3) {
          std::cin.clear();  // Clear the error flags
          std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');  // Ignore invalid input
          std::cout << "Invalid choice. Defaulting to Goku.\n";
          heroChoice = 1;  // Default to Goku
      }

      Entity* hero = nullptr;

      if (heroChoice == 1) {
          hero = new Hero("Goku", 1, 1.5, 2);
      } else if (heroChoice == 2) {
          hero = new Hero("Vegeta", 1, 1.5, 2);
      } else if (heroChoice == 3) {
          hero = new Hero("Gohan", 1, 1.5, 2);
      }


        Bag bag(5, 3);

        while (hero->get_health() > 0) {
            // Choose a random enemy (Frieza, Majin Buu, or Cell)
            std::string enemy_names[] = {"Frieza", "Majin Buu", "Cell"};
            std::string random_enemy = enemy_names[rand() % 3];

            Entity* creature = new Creature(random_enemy, hero->get_level(), 1.5, 1.3);

            std::cout << hero->get_name() << " (Level " << hero->get_level() << ") vs. " << creature->get_name() << " (Level " << creature->get_level() << ")\n";

            while (hero->get_health() > 0 && creature->get_health() > 0) {
                std::cout << hero->get_name() << "'s Health: " << hero->get_health() << " | Damage: " << hero->get_damage() << "\n";
                std::cout << creature->get_name() << " Health: " << creature->get_health() << " | " << creature->get_name() << " Damage: " << creature->get_damage() << "\n";

                std::string action;
                std::cout << "What will you do? (Type 'attack', 'use_senzu', 'use_dragon_ball', 'access_bag', 'quit' to exit): ";
                std::cin >> action;

                if (action == "attack") {
                    hero->attack(*creature);
                } else if (action == "use_senzu") {
                    bag.use_senzu(*hero);
                } else if (action == "use_dragon_ball") {
                    bag.use_dragon_ball(*hero);
                } else if (action == "access_bag") {
                    bag.access_contents();
                } else if (action == "quit") {
                    std::cout << "Thanks for playing! Goodbye.\n";
                    delete hero;
                    delete creature;
                    return; // Exit the game loop
                } else if (action == "21336069") {
                    // Secret code: Set health and damage to 999
                    hero->set_health(999);
                    hero->set_damage(999);
                    std::cout << "Secret code activated! Health and damage set to 999.\n";
                } else {
                    std::cout << "Invalid action. Try again.\n";
                }

                creature->attack(*hero);
            }

            if (hero->get_health() <= 0) {
                std::cout << "Game Over. You were defeated.\n";
            } else {
                std::cout << "Congratulations! You defeated " << creature->get_name() << ".\n";
                hero->level_up();
            }

            delete creature;
        }

        delete hero;
    }
}

int main() {
    game_loop();
    return 0;
}
